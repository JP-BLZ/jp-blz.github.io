---
layout: post
title:  "A Problem with AWS ALB Stickiness!"
subtitle:  "AWS ALB, Sticky Sessions and ERR_HTTP2_PROTOCOL_ERROR!"
date:   2023-02-01 16:05:02 +0530
categories: aws
---

Recently we encountered a strange issue while working with AWS ALB. Like any "pro" developer, my first reaction was to scavenge the internet (aka Google Search ðŸ˜›). Unfortunately no matter where I looked, I practically found no suitable explanation for the issue let alone the solution. This was one of those issues which had no trace of it on any tech forums. So I decided to myself, whenever we find a solution for this, I will put something up on the internet so anyone else with same predicament could find this here.

#### The Background
If you searched for this and came here looking for answers I believe you are going to be fine. However, if you are reading this just for fun I salute you and offer you this brief background as things hereafter are going to be a bit technical and jargon heavy. Without going into too many details, here are a few things you should know.
- **AWS ALB**: ALB (Application Load Balancer) is a service offered by AWS that helps distribute web application traffic among the set of targets (known as Target Groups) running the application.
- **Sticky Sessions**: Also know as session affinity, is a feature of ALB (or any load balancer in-general) to route traffic for same session to same target that served the very first request of the given session. There are two different ways how stickiness can be enabled on AWS ALB and how each one is achieved by ALB.
  1. *Duration-based Stickiness*: Stickiness is maintained for a predefined duration. ALB generates and uses a cookie named `AWSALB` to maintain this type of stickiness.
  2. *Application-based Stickiness*: The validity of session is managed by application using a cookie generated by the application itself. AWS ALB generates and uses a cookie named `AWSALBAPP` to maintain the stickiness. Important point to note is that this cookie can grow up to 16 KB. However, most browsers limit the cookie size to 4 KB. To get around this, ALB splits this cookie into four pieces or shards named `AWSALBAPP-0` through `AWSALBAPP-3`.

> If you are interested to know more, check [this great AWS documentation](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/sticky-sessions.html) that explains how AWS ALB manages sticky sessions.

#### The Problem
For our use case, we configured our ALB with Application-based Stickiness. Everything worked fine in our initial testing. Users were able to access the application and the stickiness was maintained properly as desired. All in all, from configuration perspective everything looked fine. As part of further testing, when users started using application for a bit longer they started seeing `ERR_HTTP2_PROTOCOL_ERROR`. Once they hit this error, they wouldn't be able to access the application any more.

#### The Analysis
We noticed that if users closed all their browser windows and started fresh, they were able to access the application. This was a clear indication that there was some issue with the cookies. So we tried clearing browser cookies after getting `ERR_HTTP2_PROTOCOL_ERROR`. As expected, we could access the application again.

At this point, we started monitoring cookies after every action performed by user on the browser. What we noticed is the `AWSALBAPP` cookie kept growing. Initially it would start with just one shard `AWSALBAPP-0` and then go on to consume all shards up to `AWSALBAPP-3`. So we decided to look at ALB configurations.

Everything on ALB and target groups was configured the way it should be. Most of the tech forums and blogs pointed to web server and app server configurations. So we analyzed logs from every component involved in serving the requests (application logs, web and app server logs and ALB logs). What we found was a valid `HTTP 200` response was being sent even for the requests that resulted in error on user's side. Even after spending almost a week we were nowhere close to identifying what was causing the issue. As a last resort, we reached out to AWS Support for help.

#### The RootÂ Cause
AWS Support personnel proved to be really helpful and they were able to provide us with the root cause behind this issue. AWS confirmed that all the configurations we had done were accurate. The problem was with the internal mechanism of AWS ALB to manage application-based stickiness. Due to an AWS internal issue, the `AWSALBAPP` cookie used by ALB kept growing beyond the capacity of it's four shards. When it grew beyond what browser can handle, the browser ended-up showing `ERR_HTTP2_PROTOCOL_ERROR`. AWS Support also said that it was a known issue for them and that it only impacted a few ALBs.

#### The Solution (or the lackÂ thereof)
Since this was AWS internal issue, there was hardly anything that we could do to resolve it. AWS Support suggested following workarounds that we could try.
- **Delete and Recreate Target Groups**: They asked us to delete the target groups and re-provision them with same configuration. Then test if the issue has been resolved.
- **Delete and Recreate ALB**: If deleting and recreating target groups did not resolve the issue, they suggested to delete the ALB and re-provision it with same configuration. Their reasoning behind this was that the issue we were facing impacted only a small percentage of ALBs and if we were lucky, the new ALB wouldn't have the issue.
- **Switch to duration-based stickiness**: If nothing worked, they suggested to switch to duration-based stickiness.

#### My Thoughts
Although the help provided by AWS for analyzing the issue was really great, the suggestions given by them to resolve the issue were not really helpful. Deleting and recreating target groups or ALBs was basically a game of chance. You roll the dice and pray for it to work. The other suggestion of switching to duration-based stickiness was simply not feasible as it meant changing the core functionality of the application associated with session management.

Deleting and re-provisioning Target Groups did not work for us. However, we were lucky enough to land the non-defective ALB after a couple of retries and put this nightmare behind us. However, I strongly feel, AWS should include it somewhere in their otherwise great documentation as they are already aware of this issue. [This page](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-troubleshooting.html) in particular would be a great place to have this error documented.

Finally, I hope no one else encounters this issue. And if someone does, I hope they find this article to put their frustrated minds at ease.
